---
title: "Homerwork 1"
author: "Peter Szkolnik"
date: 2023-05-14
format: 
  docx: default
  html:
    toc: true
    toc_float: true
    code-fold: true
editor: visual
---

```{r}
#| label: load-libraries
#| echo: false # This option disables the printing of code (only output is displayed).
#| message: false
#| warning: false

library(tidyverse)
library(nycflights13)
library(skimr)

```

# Data Manipulation

## Problem 1: Use logical operators to find flights that:

```         
-   Had an arrival delay of two or more hours (\> 120 minutes)
-   Flew to Houston (IAH or HOU)
-   Were operated by United (`UA`), American (`AA`), or Delta (`DL`)
-   Departed in summer (July, August, and September)
-   Arrived more than two hours late, but didn't leave late
-   Were delayed by at least an hour, but made up over 30 minutes in flight
```

```{r}
#| label: problem-1

# Had an arrival delay of two or more hours (> 120 minutes)
flights %>% 
  filter(arr_delay>120)

# Flew to Houston (IAH or HOU)
flights %>% 
  filter(dest=="IAH"|dest=="HOU")

# Were operated by United (`UA`), American (`AA`), or Delta (`DL`)
flights %>% 
  filter(carrier=="DL"|carrier=="AA"|carrier=="UA")

# Departed in summer (July, August, and September)
flights %>% 
  filter (month %in% c(7,8,9))
  
# Arrived more than two hours late, but didn't leave late
flights %>% 
  filter (arr_delay>120 & dep_delay==0)

# Were delayed by at least an hour, but made up over 30 minutes in flight
flights %>% 
  filter (arr_delay>=60 & dep_delay - arr_delay >30)

```

## Problem 2: What months had the highest and lowest proportion of cancelled flights? Interpret any seasonal patterns. To determine if a flight was cancelled use the following code

<!-- -->

```         
flights %>% 
  filter(is.na(dep_time)) 
```

```{r}
#| label: problem-2

# What months had the highest and lowest % of cancelled flights?

flights %>%
  group_by(month) %>%
  summarize(cancelledflights = sum(is.na(dep_time)), 
            cancelledflights_proportion = cancelledflights/n()*100) %>%
  arrange(cancelledflights_proportion)

#Lowest Proportion = October, with 236 cancelled, 0.81%
#Highers Proportion = February, with 1261 cancelled, 5.05%

#1      - higher
#2,     - highest
#3      - very high
#4, 5   - higher
#6, 7   - very high
#8, 9   - higher
#10, 11 - lowest
#12     - very high

#These patterns correspond with the increased traffic in the holiday months. The more people fly, the higher the chance of cancellation.
```

## Problem 3: What plane (specified by the `tailnum` variable) traveled the most times from New York City airports in 2013? Please `left_join()` the resulting table with the table `planes` (also included in the `nycflights13` package).

For the plane with the greatest number of flights and that had more than 50 seats, please create a table where it flew to during 2013.

```{r}
  
view(planes)
library(nycflights13)
library(tidyverse)
library(skimr)

flights %>%
  filter(origin %in% c("JFK","LGA","EWR")) %>% 
  filter(year==2013) %>%
  group_by(tailnum) %>% 
  summarize(bigapple13 = n()) %>% 
  arrange(desc(bigapple13))
  joined_data <- left_join(flights, planes, by = "tailnum")
  joined_data

# plane that traveled the most was N725MQ
  
planes %>% 
  filter(tailnum =="N725MQ")

# cant find plane N725MQ in table planes ??

```

## Problem 4: The `nycflights13` package includes a table (`weather`) that describes the weather during 2013. Use that table to answer the following questions:

```         
-   What is the distribution of temperature (`temp`) in July 2013? Identify any important outliers in terms of the `wind_speed` variable.
-   What is the relationship between `dewp` and `humid`?
-   What is the relationship between `precip` and `visib`?
```

weather %\>%

filter(month==7) %\>%

ggplot(data = weather, mapping = aes(x = day, y=wind_speed )) +

geom_point()

```{r}
glimpse(weather)
data("weather")
library(nycflights13)
library(tidyverse)
library(skimr)


data("weather")

#What is the distribution of temperature (`temp`) in July 2013?
weather %>%
  filter(month==7) %>% 
  ggplot(data = weather, mapping = aes(x = day, y=temp)) +
  geom_point()

#Identify any important outliers in terms of the `wind_speed` variable.
weather %>%
  filter(month==7) %>% 
  ggplot(data = weather, mapping = aes(x = day, y=wind_speed)) +
  geom_point()

#day 12!

#What is the relationship between `dewp` and `humid`?
weather %>%
  ggplot(data = weather, mapping = aes(x = dewp, y=humid )) +
  geom_point()


#What is the relationship between `precip` and `visib`?
weather %>%
  ggplot(data = weather, mapping = aes(x = precip, y=visib )) +
  geom_point()


```

## Problem 5: Use the `flights` and `planes` tables to answer the following questions:

```         
-   How many planes have a missing date of manufacture?
-   What are the five most common manufacturers?
-   Has the distribution of manufacturer changed over time as reflected by the airplanes flying from NYC in 2013? (Hint: you may need to use case_when() to recode the manufacturer name and collapse rare vendors into a category called Other.)
```

```{r}

library(nycflights13)
library(tidyverse)
library(skimr)
data("flights")
data("planes")

#How many planes have a missing date of manufacture?
planes %>% 
  summarize(nodate = sum(is.na(year)))

#What are the five most common manufacturers?
planes %>% 
  group_by(manufacturer) %>% 
  summarise(m = n()) %>% 
  arrange(desc(m))

#Has the distribution of manufacturer changed over time as reflected by the airplanes flying from NYC in 2013? 

#joining planes and flights in order to display them on xy axis
flights <- flights %>% 
  filter(year == 2013) %>% 
  filter(origin %in% c("JFK","LGA","EWR") )
  joined_data <- left_join(flights, planes, by = "tailnum")

#want to group manufacturers by the top 5, and the rest put in the category Other
joined_data <- joined_data %>%
  mutate(manufacturer = case_when(
    manufacturer %in% c("BOEING", "AIRBUS", "EMBRAER", "BOMBARDIER", "MCDONNELL DOUGLAS") ~ manufacturer,
    TRUE ~ "OTHER"
  ))

#now I am counting the number of flights per manufacturer
manufacturer_dist <- joined_data %>%
  group_by(month, manufacturer) %>%
  count() %>%
  ungroup() %>%
  mutate(total_flights = sum(n)) %>%
  mutate(percentage = n / total_flights * 100)

#now I will plot this data on the graph using the same categories
ggplot(manufacturer_dist, aes(x = month, y = percentage, color = manufacturer)) +
  geom_line() +
  labs(x="month", y="percentage", title="distribution of manufacturer changed over time as reflected by the airplanes flying from NYC in 2013") +
  scale_color_discrete(name="Manufacturer", labels = c("BOEING", "AIRBUS", "EMBRAER", "BOMBARDIER", "MCDONNELL DOUGLAS", "OTHER"))
```

## Problem 6: Use the `flights` and `planes` tables to answer the following questions:

```         
-   What is the oldest plane (specified by the tailnum variable) that flew from New York City airports in 2013?
-   How many airplanes that flew from New York City are included in the planes table?
```

```{r}

library(nycflights13)
library(tidyverse)
library(skimr)
data("flights")
data("planes")

#What is the oldest plane (specified by the tailnum variable) that flew from New York City airports in 2013?

flights <- flights %>% 
  filter(year == 2013) %>% 
  filter(origin %in% c("JFK","LGA","EWR") )

  left_join(flights, planes, by = "tailnum") %>% 
  arrange(day, month, year.y) %>% 
  select(tailnum, day, month, year.y)

#N711MQ in 1976
  
#How many airplanes that flew from New York City are included in the planes table?

flights <- flights %>% 
  filter(origin %in% c("JFK","LGA","EWR") )

(nyc <- planes %>%   
  left_join(planes, flights, by = "tailnum") %>%
  select(tailnum) %>% 
  summarise(this_many_airplanes_flew_from_nyc = n()))


```

## Problem 7: Use the `nycflights13` to answer the following questions:

```         
-   What is the median arrival delay on a month-by-month basis in each airport?
-   For each airline, plot the median arrival delay for each month and origin airport.
```

```{r}

library(nycflights13)
library(tidyverse)
library(skimr)
data("flights")
glimpse(flights)

#What is the median arrival delay on a month-by-month basis in each airport?
flights %>% 
  group_by(origin, month) %>% 
  summarise(median(arr_delay, na.rm = TRUE))

#For each airline, plot the median arrival delay for each month and origin airport.

#??

```

## Problem 8: Let's take a closer look at what carriers service the route to San Francisco International (SFO). Join the `flights` and `airlines` tables and count which airlines flew the most to SFO. Produce a new dataframe, `fly_into_sfo` that contains three variables: the `name` of the airline, e.g., `United Air Lines Inc.` not `UA`, the count (number) of times it flew to SFO, and the `percent` of the trips that that particular airline flew to SFO.

```{r}

library(nycflights13)
library(tidyverse)
library(skimr)
data("flights")
data("airlines")

#What carriers service the route to San Francisco International (SFO)

#Join the flights and airlines tables
fly_into_sfo <- flights %>%
  left_join(airlines, by = "carrier")

#count which airlines flew the most to SFO
(fly_into_sfo <- fly_into_sfo %>% 
  filter(dest == "SFO") %>%
  group_by(name) %>%
  summarise(count = n(), percent = n() / nrow(flights) * 100) %>% 
  arrange(desc(count))
)


```

And here is some bonus ggplot code to plot your dataframe

```{r}
#| label: ggplot-flights-toSFO
#| message: false
#| warning: false

fly_into_sfo %>% 
  
  # sort 'name' of airline by the numbers it times to flew to SFO
  mutate(name = fct_reorder(name, count)) %>% 
  
  ggplot() +
  
  aes(x = count, 
      y = name) +
  
  # a simple bar/column plot
  geom_col() +
  
  # add labels, so each bar shows the % of total flights 
  geom_text(aes(label = percent),
             hjust = 1, 
             colour = "white", 
             size = 5)+
  
  # add labels to help our audience  
  labs(title="Which airline dominates the NYC to SFO route?", 
       subtitle = "as % of total flights in 2013",
       x= "Number of flights",
       y= NULL) +
  
  theme_minimal() + 
  
  # change the theme-- i just googled those , but you can use the ggThemeAssist add-in
  # https://cran.r-project.org/web/packages/ggThemeAssist/index.html
  
  theme(#
    # so title is left-aligned
    plot.title.position = "plot",
    
    # text in axes appears larger        
    axis.text = element_text(size=12),
    
    # title text is bigger
    plot.title = element_text(size=18)
      ) +

  # add one final layer of NULL, so if you comment out any lines
  # you never end up with a hanging `+` that awaits another ggplot layer
  NULL
 
 
```

## Problem 9: Let's take a look at cancellations of flights to SFO. We create a new dataframe `cancellations` as follows

```{r}

cancellations <- flights %>% 
  
  # just filter for destination == 'SFO'
  filter(dest == 'SFO') %>% 
  
  # a cancelled flight is one with no `dep_time` 
  filter(is.na(dep_time))


# use group_by() to group month, carrier, and airport origin
# summarise() new variable c = n() where number of cancellations is counted, then use ggplot, with x = month, y = c, colour = carrier. 
# use facet_wrap() to catagorise by carrier and airport origin
```

I want you to think how we would organise our data manipulation to create the following plot. No need to write the code, just explain in words how you would go about it.

![](images/sfo-cancellations.png)

## Problem 10: On your own -- Hollywood Age Gap

The website https://hollywoodagegap.com is a record of *THE AGE DIFFERENCE IN YEARS BETWEEN MOVIE LOVE INTERESTS*. This is an informational site showing the age gap between movie love interests and the data follows certain rules:

-   The two (or more) actors play actual love interests (not just friends, coworkers, or some other non-romantic type of relationship)
-   The youngest of the two actors is at least 17 years old
-   No animated characters

The age gaps dataset includes "gender" columns, which always contain the values "man" or "woman". These values appear to indicate how the characters in each film identify and some of these values do not match how the actor identifies. We apologize if any characters are misgendered in the data!

The following is a data dictionary of the variables used

| variable            | class     | description                                                                                             |
|:--------------------|:----------|:--------------------------------------------------------------------------------------------------------|
| movie_name          | character | Name of the film                                                                                        |
| release_year        | integer   | Release year                                                                                            |
| director            | character | Director of the film                                                                                    |
| age_difference      | integer   | Age difference between the characters in whole years                                                    |
| couple_number       | integer   | An identifier for the couple in case multiple couples are listed for this film                          |
| actor_1\_name       | character | The name of the older actor in this couple                                                              |
| actor_2\_name       | character | The name of the younger actor in this couple                                                            |
| character_1\_gender | character | The gender of the older character, as identified by the person who submitted the data for this couple   |
| character_2\_gender | character | The gender of the younger character, as identified by the person who submitted the data for this couple |
| actor_1\_birthdate  | date      | The birthdate of the older member of the couple                                                         |
| actor_2\_birthdate  | date      | The birthdate of the younger member of the couple                                                       |
| actor_1\_age        | integer   | The age of the older actor when the film was released                                                   |
| actor_2\_age        | integer   | The age of the younger actor when the film was released                                                 |

```{r}

age_gaps <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-14/age_gaps.csv')

glimpse(age_gaps)

#How is age_difference distributed? 
age_gaps %>%
  ggplot(data = age_gaps, mapping = aes(x = movie_name, y=age_difference)) +
  geom_point()

#What's the 'typical' age_difference in movies?
age_gaps %>%
  summarise(age_difference = mean(age_difference,na.rm = TRUE))

#How frequently does this rule apply in this dataset?
age_gaps %>% 
  count(age_difference > 14)
  summarise(count = n())
  #309 times out of the dataset
  
#Which movie has the greatest number of love interests?
age_gaps %>%
  group_by(movie_name) %>%
  filter(age_difference > 14)
  arrange(movie_name, desc(age_difference))

#Which actors/ actresses have the greatest number of love interests in this dataset?
age_gaps %>%
  group_by(actor_1_name) %>%
  filter(age_difference > 14)
  arrange(actor_1_name, desc(age_difference))
  
age_gaps %>%
  group_by(actor_2_name) %>%
  filter(age_difference > 14)
  arrange(actor_2_name, desc(age_difference))

#How frequently does Hollywood depict same-gender love interests?
age_gaps %>% 
  filter(character_1_gender == character_2_gender)
  #23 times

```

How would you explore this data set? Here are some ideas of tables/ graphs to help you with your analysis

-   How is `age_difference` distributed? What's the 'typical' `age_difference` in movies?

-   The `half plus seven\` rule. Large age disparities in relationships carry certain stigmas. One popular rule of thumb is the [half-your-age-plus-seven](https://en.wikipedia.org/wiki/Age_disparity_in_sexual_relationships#The_.22half-your-age-plus-seven.22_rule) rule. This rule states you should never date anyone under half your age plus seven, establishing a minimum boundary on whom one can date. In order for a dating relationship to be acceptable under this rule, your partner's age must be:

$$\frac{\text{Your age}}{2} + 7 < \text{Partner Age} < (\text{Your age} - 7) * 2$$ How frequently does this rule apply in this dataset?

-   Which movie has the greatest number of love interests?
-   Which actors/ actresses have the greatest number of love interests in this dataset?
-   Is the mean/median age difference staying constant over the years (1935 - 2022)?
-   How frequently does Hollywood depict same-gender love interests?

# Deliverables

There is a lot of explanatory text, comments, etc. You do not need these, so delete them and produce a stand-alone document that you could share with someone. Render the edited and completed Quarto Markdown (qmd) file as a Word document (use the "Render" button at the top of the script editor window) and upload it to Canvas. You must be commiting and pushing tour changes to your own Github repo as you go along.

# Details

-   Who did you collaborate with: TYPE NAMES HERE
-   Approximately how much time did you spend on this problem set: ANSWER HERE
-   What, if anything, gave you the most trouble: ANSWER HERE

**Please seek out help when you need it,** and remember the [15-minute rule](https://mam2022.netlify.app/syllabus/#the-15-minute-rule){target="_blank"}. You know enough R (and have enough examples of code from class and your readings) to be able to do this. If you get stuck, ask for help from others, post a question on Slack-- and remember that I am here to help too!

> As a true test to yourself, do you understand the code you submitted and are you able to explain it to someone else?

# Rubric

13/13: Problem set is 100% completed. Every question was attempted and answered, and most answers are correct. Code is well-documented (both self-documented and with additional comments as necessary). Used tidyverse, instead of base R. Graphs and tables are properly labelled. Analysis is clear and easy to follow, either because graphs are labeled clearly or you've written additional text to describe how you interpret the output. Multiple Github commits. Work is exceptional. I will not assign these often.

8/13: Problem set is 60--80% complete and most answers are correct. This is the expected level of performance. Solid effort. Hits all the elements. No clear mistakes. Easy to follow (both the code and the output). A few Github commits.

5/13: Problem set is less than 60% complete and/or most answers are incorrect. This indicates that you need to improve next time. I will hopefully not assign these often. Displays minimal effort. Doesn't complete all components. Code is poorly written and not documented. Uses the same type of plot for each graph, or doesn't use plots appropriate for the variables being analyzed. No Github commits.
