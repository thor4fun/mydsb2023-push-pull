---
title: "Homerwork 2"
author: "Piotr (Peter) Szkolnik"
date: 2023-05-21
format: 
  docx: default
  html:
    toc: true
    toc_float: true
    code-fold: true
editor: visual
---

```{r}
#| label: load-libraries
#| echo: false # This option disables the printing of code (only output is displayed).
#| message: false
#| warning: false

library(tidyverse)
library(wbstats)
library(skimr)
library(countrycode)
library(here)
```

# Data Visualisation - Exploration

Now that you've demonstrated your software is setup, and you have the basics of data manipulation, the goal of this assignment is to practice transforming, visualising, and exploring data.

# Mass shootings in the US

In July 2012, in the aftermath of a mass shooting in a movie theater in Aurora, Colorado, [Mother Jones](https://www.motherjones.com/politics/2012/07/mass-shootings-map/) published a report on mass shootings in the United States since 1982. Importantly, they provided the underlying data set as [an open-source database](https://www.motherjones.com/politics/2012/12/mass-shootings-mother-jones-full-data/) for anyone interested in studying and understanding this criminal behavior.

## Obtain the data

```{r}
#| echo: false
#| message: false
#| warning: false


mass_shootings <- read_csv(here::here("data", "mass_shootings.csv"))

glimpse(mass_shootings)
```

| column(variable)     | description                                                                 |
|----------------------|-----------------------------------------------------------------------------|
| case                 | short name of incident                                                      |
| year, month, day     | year, month, day in which the shooting occurred                             |
| location             | city and state where the shooting occcurred                                 |
| summary              | brief description of the incident                                           |
| fatalities           | Number of fatalities in the incident, excluding the shooter                 |
| injured              | Number of injured, non-fatal victims in the incident, excluding the shooter |
| total_victims        | number of total victims in the incident, excluding the shooter              |
| location_type        | generic location in which the shooting took place                           |
| male                 | logical value, indicating whether the shooter was male                      |
| age_of_shooter       | age of the shooter when the incident occured                                |
| race                 | race of the shooter                                                         |
| prior_mental_illness | did the shooter show evidence of mental illness prior to the incident?      |

## Explore the data

### Specific questions

-   Generate a data frame that summarizes the number of mass shootings per year.

```{r}
#I am taking data I read to mass_shootings and creating a new output where I will group it per year.
mass_shootings_peryear <- mass_shootings %>%
#I am grouping my output using group_by and displaying it on the screen
  group_by(year) %>% 
  summarise(count = n())
mass_shootings_peryear
```

-   Generate a bar chart that identifies the number of mass shooters associated with each race category. The bars should be sorted from highest to lowest and each bar should show its number.

```{r}
mass_shootings %>% 
  count(race) %>%
# Chnging bar to be sorted from highest to lowest
  mutate(race = fct_reorder(race, n, .desc = TRUE)) %>% 
# Using ggplot to create a chart with x, y axis
  ggplot(aes(x = race, y = n)) + 
# Specifying column type
  geom_col() 
```

-   Generate a boxplot visualizing the number of total victims, by type of location.

```{r}
mass_shootings %>%
  ggplot(aes(x = location_type, y = total_victims)) +
  geom_boxplot()
```

-   Redraw the same plot, but remove the Las Vegas Strip massacre from the dataset.

```{r}
# I am filtering out the LVS massacre
mass_shootings_notlas <- mass_shootings %>%
  filter(case != "Las Vegas Strip massacre")
# Now I can use the same function to draw the graph
mass_shootings_notlas %>%
  ggplot(aes(x = location_type, y = total_victims)) +
  geom_boxplot()
```

### More open-ended questions

Address the following questions. Generate appropriate figures/tables to support your conclusions.

-   How many white males with prior signs of mental illness initiated a mass shooting after 2000?

```{r}
# I will re-load everything from scratch
library(tidyverse)
library(wbstats)
library(skimr)
library(countrycode)
library(here)

mass_shootings <- read_csv(here::here("data", "mass_shootings.csv"))

#Now I am filtering for white males with mental inless and focusing on the cases above year 2000 (incl)
mass_shootings %>%
  filter(race == "White", male == "TRUE", prior_mental_illness == "Yes", year >= 2000) %>% 
  summarise(count = n())

#There are 23 cases like this.
```

-   Which month of the year has the most mass shootings? Generate a bar chart sorted in chronological (natural) order (Jan-Feb-Mar- etc) to provide evidence of your answer.

```{r}
#I am finding out the year and number of events, similar to the first question
mass_shootings_month <- mass_shootings %>% 
  group_by(month) %>%
  summarise(count = n())

#Now I am plotting that data onto a grapth using ggplot
mass_shootings_month %>% 
  ggplot(aes(x = month, y = count)) +
  geom_col() +
  labs(x = "Month", y = "Shootings", title = "Shootings per month")

#Looks like February is the culprit here.
```

-   How does the distribution of mass shooting fatalities differ between White and Black shooters? What about White and Latino shooters?

```{r}
#W&B shooters
white_black_data <- mass_shootings %>%
  filter(race %in% c("White", "Black"))
#Creating a graph with this data.
ggplot(white_black_data, aes(x = race, y = fatalities)) +
  geom_boxplot() +
  labs(x = "Race", y = "Fatalities", title = "White vs. Black Shooters")

#W&L shooters
white_latino_data <- mass_shootings %>%
  filter(race %in% c("White", "Latino"))
#Creating a graph with this data
ggplot(white_latino_data, aes(x = race, y = fatalities)) +
  geom_boxplot() +
  labs(x = "Race", y = "Fatalities", title = "White vs. Latino Shooters")

```

### Very open-ended

-   Are mass shootings with shooters suffering from mental illness different from mass shootings with no signs of mental illness in the shooter?

```{r}
mass_shootings %>%
  filter(!is.na(prior_mental_illness)) %>% 
  group_by(prior_mental_illness) %>%
  summarise(count = n()) %>%  
  
  ggplot(aes(x = prior_mental_illness, y = count)) +
  geom_col() +
  labs(x = "Mental Illness", y = "Shootings", title = "Proportion of shootings with shooters suffering from mental ilness")

```

-   Assess the relationship between mental illness and total victims, mental illness and location type, and the intersection of all three variables.

```{r}
# I am taking the same code as above, just looking at total victims instead of number of shootings.
mass_shootings %>% 
  filter(!is.na(prior_mental_illness)) %>% 
  ggplot(aes(x = prior_mental_illness, y = total_victims)) +
  geom_col() +
  labs(x = "Mental Illness", y = "Total Victims", title = "Mass shootings with shooters suffering from mental illness vs No signs of mental illness ")

# Many more people died in tragiedies cased by people with mental ilness
```

Make sure to provide a couple of sentences of written interpretation of your tables/figures. Graphs and tables alone will not be sufficient to answer this question.

# Exploring credit card fraud

We will be using a dataset with credit card transactions containing legitimate and fraud transactions. Fraud is typically well below 1% of all transactions, so a naive model that predicts that all transactions are legitimate and not fraudulent would have an accuracy of well over 99%-- pretty good, no? (well, not quite as we will see later in the course)

You can read more on credit card fraud on [Credit Card Fraud Detection Using Weighted Support Vector Machine](https://www.scirp.org/journal/paperinformation.aspx?paperid=105944)

The dataset we will use consists of credit card transactions and it includes information about each transaction including customer details, the merchant and category of purchase, and whether or not the transaction was a fraud.

## Obtain the data

The dataset is too large to be hosted on Canvas or Github, so please download it from dropbox https://www.dropbox.com/sh/q1yk8mmnbbrzavl/AAAxzRtIhag9Nc_hODafGV2ka?dl=0 and save it in your `dsb` repo, under the `data` folder

```{r}
#| echo: false
#| message: false
#| warning: false

card_fraud <- read_csv(here::here("data", "card_fraud.csv"))

glimpse(card_fraud)
```

The data dictionary is as follows

| column(variable)      | description                                 |
|-----------------------|---------------------------------------------|
| trans_date_trans_time | Transaction DateTime                        |
| trans_year            | Transaction year                            |
| category              | category of merchant                        |
| amt                   | amount of transaction                       |
| city                  | City of card holder                         |
| state                 | State of card holder                        |
| lat                   | Latitude location of purchase               |
| long                  | Longitude location of purchase              |
| city_pop              | card holder's city population               |
| job                   | job of card holder                          |
| dob                   | date of birth of card holder                |
| merch_lat             | Latitude Location of Merchant               |
| merch_long            | Longitude Location of Merchant              |
| is_fraud              | Whether Transaction is Fraud (1) or Not (0) |

-   In this dataset, how likely are fraudulent transactions? Generate a table that summarizes the number and frequency of fraudulent transactions per year.

```{r}
library(tidyverse)
library(skimr)
library(here)

card_fraud <- read_csv(here::here("data", "card_fraud.csv"))

#After loading the data, I am filtering out against fraud and grouping by transaction year.
card_fraud %>%
  filter(is_fraud == 1) %>% 
  group_by(trans_year) %>%
  summarise(count = n())

```

-   How much money (in US\$ terms) are fraudulent transactions costing the company? Generate a table that summarizes the total amount of legitimate and fraudulent transactions per year and calculate the % of fraudulent transactions, in US\$ terms.

```{r}

#Using the data I just loaded in the previous question, I am grouping and creating a categories. 

summary_table <- card_fraud %>%
  group_by(trans_year, is_fraud) %>%
  summarize(total_amt = sum(amt))

# Adding up fraud transactions
fraud_sum <- summary_table %>%
  filter(is_fraud == 1) %>%
  mutate(fraud_amt = total_amt) %>%
  select(trans_year, fraud_amt)

# Adding up legitimate transactions
legitimate_sum <- summary_table %>%
  filter(is_fraud == 0) %>%
  mutate(legitimate_amt = total_amt) %>%
  select(trans_year, legitimate_amt)

# Calculating proportions (%)
fraud_percentage <- fraud_sum %>%
  left_join(legitimate_sum, by = "trans_year") %>%
  mutate(percentage_fraud = (fraud_amt / (fraud_amt + legitimate_amt)) * 100) %>%
  select(trans_year, fraud_amt, legitimate_amt, percentage_fraud)

fraud_percentage
```

-   Generate a histogram that shows the distribution of amounts charged to credit card, both for legitimate and fraudulent accounts. Also, for both types of transactions, calculate some quick summary statistics.

```{r}

#Using data that I just calculated:
fraud_percentage <- fraud_sum %>%
  left_join(legitimate_sum, by = "trans_year") %>%
  mutate(percentage_fraud = (fraud_amt / (fraud_amt + legitimate_amt)) * 100, percentage_legitimate = (legitimate_amt / (fraud_amt + legitimate_amt)) * 100) %>%
  select(trans_year, fraud_amt, legitimate_amt, percentage_fraud, percentage_legitimate) %>% 

  #I am plotting that data using ggplot  
  ggplot(aes(x = trans_year, y = fraud_amt + legitimate_amt)) +
  geom_col(aes(fill = paste0(percentage_fraud, "% Fraud\n", percentage_legitimate, "% Legitimate")), width = 0.5) +
  labs(title = "Total per Year",
       x = "Year", y = "Total Amount") +
  scale_fill_manual(values = c("blue", "green"), name = "Transaction Type")

fraud_percentage

```

-   What types of purchases are most likely to be instances of fraud? Consider category of merchants and produce a bar chart that shows % of total fraudulent transactions sorted in order.

```{r}
# What types of purchases are most likely to be instances of fraud? Consider category of merchants
fraud_by_category <- card_fraud %>%
  filter(is_fraud == 1) %>%
  count(category, wt = amt) %>%
  mutate(percentage = (n / sum(n)) * 100) %>%
  arrange(desc(percentage))

# Produce a bar chart that shows % of total fraudulent transactions sorted in order

bar_chart <- ggplot(fraud_by_category, aes(x = reorder(category, percentage), y = percentage)) +
  geom_bar(stat = "identity") +
  labs(title = "Percentage of Fraudulent Transactions by Merchant Category",
       x = "Merchant Category", y = "Percentage of Fraudulent Transactions") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Print the bar chart
bar_chart

```

-   When is fraud more prevalent? Which days, months, hours? To create new variables to help you in your analysis, we use the `lubridate` package and the following code

```         
mutate(
  date_only = lubridate::date(trans_date_trans_time),
  month_name = lubridate::month(trans_date_trans_time, label=TRUE),
  hour = lubridate::hour(trans_date_trans_time),
  weekday = lubridate::wday(trans_date_trans_time, label = TRUE)
  )
```

-   Are older customers significantly more likely to be victims of credit card fraud? To calculate a customer's age, we use the `lubridate` package and the following code

```         
  mutate(
   age = interval(dob, trans_date_trans_time) / years(1),
    )
```

```{r}
#Using mutate function
card_fraud <- card_fraud %>% 
  mutate(
  date_only = lubridate::date(trans_date_trans_time),
  month_name = lubridate::month(trans_date_trans_time, label=TRUE),
  hour = lubridate::hour(trans_date_trans_time),
  weekday = lubridate::wday(trans_date_trans_time, label = TRUE)
  )

#When is fraud more prevalent? (grouped by date)
card_fraud %>% 
  filter(is_fraud == 1) %>% 
  group_by(date_only) %>%
  select(date_only, amt) %>% 
  arrange(desc(amt))
#When is fraud more prevalent? (grouped by month)
card_fraud %>% 
  filter(is_fraud == 1) %>%
  group_by(month_name) %>% 
  summarise(count = n()) %>% 
  arrange(desc(count))
#When is fraud more prevalent? (grouped by hour)
card_fraud %>% 
  filter(is_fraud == 1) %>%
  group_by(hour) %>% 
  summarise(count = n()) %>% 
  arrange(desc(count))
#When is fraud more prevalent? (grouped by day of week)
card_fraud %>% 
  filter(is_fraud == 1) %>%
  group_by(weekday) %>% 
  summarise(count = n()) %>% 
  arrange(desc(count))


#Most ammount of fraud occured on 18th Jan 2019; March and May have most ammount of fraud; fraudsters love to work late (23:00) and on Mondays


```

-   Is fraud related to distance? The distance between a card holder's home and the location of the transaction can be a feature that is related to fraud. To calculate distance, we need the latidue/longitude of card holders's home and the latitude/longitude of the transaction, and we will use the [Haversine formula](https://en.wikipedia.org/wiki/Haversine_formula) to calculate distance. I adapted code to [calculate distance between two points on earth](https://www.geeksforgeeks.org/program-distance-two-points-earth/amp/) which you can find below

```{r}
# distance between card holder's home and transaction
# code adapted from https://www.geeksforgeeks.org/program-distance-two-points-earth/amp/

library(tidyverse)
library(skimr)
library(here)
library(lubridate)

fraud <- card_fraud %>%
  mutate(
    
    # convert latitude/longitude to radians
    lat1_radians = lat / 57.29577951,
    lat2_radians = merch_lat / 57.29577951,
    long1_radians = long / 57.29577951,
    long2_radians = merch_long / 57.29577951,
    
    # calculate distance in miles
    distance_miles = 3963.0 * acos((sin(lat1_radians) * sin(lat2_radians)) + cos(lat1_radians) * cos(lat2_radians) * cos(long2_radians - long1_radians)),

    # calculate distance in km
    distance_km = 6377.830272 * acos((sin(lat1_radians) * sin(lat2_radians)) + cos(lat1_radians) * cos(lat2_radians) * cos(long2_radians - long1_radians))

  )

fraud %>% 
  ggplot(aes(x = distance_km, y = is_fraud)) +
  geom_boxplot()

```

Plot a boxplot or a violin plot that looks at the relationship of distance and `is_fraud`. Does distance seem to be a useful feature in explaining fraud?

# Exploring sources of electricity production, CO2 emissions, and GDP per capita.

There are many sources of data on how countries generate their electricity and their CO2 emissions. I would like you to create three graphs:

## 1. A stacked area chart that shows how your own country generated its electricity since 2000.

You will use

`geom_area(colour="grey90", alpha = 0.5, position = "fill")`

## 2. A scatter plot that looks at how CO2 per capita and GDP per capita are related

## 3. A scatter plot that looks at how electricity usage (kWh) per capita/day GDP per capita are related

We will get energy data from the Our World in Data website, and CO2 and GDP per capita emissions from the World Bank, using the `wbstats`package.

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(wbstats)
library(skimr)
library(here)

# Download electricity data
url <- "https://nyc3.digitaloceanspaces.com/owid-public/data/energy/owid-energy-data.csv"

energy <- read_csv(url) %>% 
  filter(year >= 1990) %>% 
  drop_na(iso_code) %>% 
  select(1:3,
         biofuel = biofuel_electricity,
         coal = coal_electricity,
         gas = gas_electricity,
         hydro = hydro_electricity,
         nuclear = nuclear_electricity,
         oil = oil_electricity,
         other_renewable = other_renewable_exc_biofuel_electricity,
         solar = solar_electricity,
         wind = wind_electricity, 
         electricity_demand,
         electricity_generation,
         net_elec_imports,  # Net electricity imports, measured in terawatt-hours
         energy_per_capita, # Primary energy consumption per capita, measured in kilowatt-hours Calculated by Our World in Data based on BP Statistical Review of World Energy and EIA International Energy Data
         energy_per_gdp,    # Energy consumption per unit of GDP. This is measured in kilowatt-hours per 2011 international-$.
         per_capita_electricity, #  Electricity generation per capita, measured in kilowatt-hours
  ) 

# Download data for C02 emissions per capita https://data.worldbank.org/indicator/EN.ATM.CO2E.PC
co2_percap <- wb_data(country = "countries_only", 
                      indicator = "EN.ATM.CO2E.PC", 
                      start_date = 1990, 
                      end_date = 2022,
                      return_wide=FALSE) %>% 
  filter(!is.na(value)) %>% 
  #drop unwanted variables
  select(-c(unit, obs_status, footnote, last_updated)) %>% 
  rename(year = date,
         co2percap = value)


# Download data for GDP per capita  https://data.worldbank.org/indicator/NY.GDP.PCAP.PP.KD
gdp_percap <- wb_data(country = "countries_only", 
                      indicator = "NY.GDP.PCAP.PP.KD", 
                      start_date = 1990, 
                      end_date = 2022,
                      return_wide=FALSE) %>% 
  filter(!is.na(value)) %>% 
  #drop unwanted variables
  select(-c(unit, obs_status, footnote, last_updated)) %>% 
  rename(year = date,
         GDPpercap = value)

#Q1 A stacked area chart that shows how your own country generated its electricity since 2000

energy %>% 
  filter(country == "Poland", year >= 2000) %>% 
  ggplot(aes(x = year, y = electricity_generation)) +
  geom_area(colour="red", alpha = 0.7, position = "fill") + 
  labs(title = "Poland Electricity Generation")

#Q2 A scatter plot that looks at how CO2 per capita and GDP per capita are related
co2_gdp_percap <- co2_percap %>%
  left_join(gdp_percap, by = "iso3c")

co2_gdp_percap %>%
  ggplot(aes(x = co2percap, y = GDPpercap)) +
  geom_point() + 
  labs(title = "How CO2 per capita and GDP per capita are related")

#Q3 A scatter plot that looks at how electricity usage (kWh) per capita/day and GDP per capita are related
energy_gdp_percap <- energy %>% 
  mutate(iso3c = iso_code) %>% 
  left_join(gdp_percap, by = "iso3c")

energy_gdp_percap %>% 
  ggplot(aes(x = per_capita_electricity, y = GDPpercap)) +
  geom_point() + 
  labs(title = "How Electricity usage (kWh) per capita/day and GDP per capita are related")

```

Specific questions:

1.  How would you turn `energy` to long, tidy format?
2.  You may need to join these data frames
    -   Use `left_join` from `dplyr` to [join the tables](http://r4ds.had.co.nz/relational-data.html)
    -   To complete the merge, you need a unique *key* to match observations between the data frames. Country names may not be consistent among the three dataframes, so please use the 3-digit ISO code for each country
    -   An aside: There is a great package called [`countrycode`](https://github.com/vincentarelbundock/countrycode) that helps solve the problem of inconsistent country names (Is it UK? United Kingdon? Great Britain?). `countrycode()` takes as an input a country's name in a specific format and outputs it using whatever format you specify.
3.  Write a function that takes as input any country's name and returns all three graphs. You can use the `patchwork` package to arrange the three graphs as shown below

![](images/electricity-co2-gdp.png)

# Deliverables

There is a lot of explanatory text, comments, etc. You do not need these, so delete them and produce a stand-alone document that you could share with someone. Knit the edited and completed Quarto Markdown (qmd) file as a Word document (use the "Render" button at the top of the script editor window) and upload it to Canvas. You must be commiting and pushing tour changes to your own Github repo as you go along.

# Details

-   Who did you collaborate with: TYPE NAMES HERE
-   Approximately how much time did you spend on this problem set: ANSWER HERE
-   What, if anything, gave you the most trouble: ANSWER HERE

**Please seek out help when you need it,** and remember the [15-minute rule](https://mam2022.netlify.app/syllabus/#the-15-minute-rule){target="_blank"}. You know enough R (and have enough examples of code from class and your readings) to be able to do this. If you get stuck, ask for help from others, post a question on Slack-- and remember that I am here to help too!

> As a true test to yourself, do you understand the code you submitted and are you able to explain it to someone else?

# Rubric

13/13: Problem set is 100% completed. Every question was attempted and answered, and most answers are correct. Code is well-documented (both self-documented and with additional comments as necessary). Used tidyverse, instead of base R. Graphs and tables are properly labelled. Analysis is clear and easy to follow, either because graphs are labeled clearly or you've written additional text to describe how you interpret the output. Multiple Github commits. Work is exceptional. I will not assign these often.

8/13: Problem set is 60--80% complete and most answers are correct. This is the expected level of performance. Solid effort. Hits all the elements. No clear mistakes. Easy to follow (both the code and the output). A few Github commits.

5/13: Problem set is less than 60% complete and/or most answers are incorrect. This indicates that you need to improve next time. I will hopefully not assign these often. Displays minimal effort. Doesn't complete all components. Code is poorly written and not documented. Uses the same type of plot for each graph, or doesn't use plots appropriate for the variables being analyzed. No Github commits.
